name: 'versioner'
description: 'Git Tag versioning with semantic version calculation'

outputs:
  version:
    value: ${{ steps.semver.outputs.version }}
    description: 'The calculated semantic version'
  clean-version:
    value: ${{ steps.semver.outputs.clean-version }}
    description: 'Version without v prefix'
  is-prerelease:
    value: ${{ steps.semver.outputs.is-prerelease }}
    description: 'Whether this is a pre-release version'

runs:
  using: composite
  steps:
    - name: Check if using local action
      id: check-local
      shell: bash
      run: |
        if [[ "${{ github.action_repository }}" == "${{ github.repository }}" ]]; then
          echo "is-local=true" >> $GITHUB_OUTPUT
          echo "Using local versioning script (already checked out)"
        else
          echo "is-local=false" >> $GITHUB_OUTPUT
          echo "Using external versioning script"
        fi

    - name: Checkout versioning tools (external usage only)
      if: steps.check-local.outputs.is-local == 'false'
      uses: actions/checkout@v4
      with:
        repository: DragosDumitrache/versioner
        ref: ${{ github.action_ref }}
        path: versioning-tools

    - name: Check git repository
      shell: bash
      run: |
        if [ ! -d ".git" ]; then
          echo "❌ Error: Not a git repository or missing .git directory"
          echo "💡 Make sure your workflow checks out the repository with full history:"
          echo "   - uses: actions/checkout@v4"
          echo "     with:"
          echo "       fetch-depth: 0"
          exit 1
        fi

    - name: Generate semantic version
      id: semver
      working-directory: ${{ github.workspace }}
      shell: bash
      run: |
        # Determine script path based on local vs external usage
        if [[ "${{ steps.check-local.outputs.is-local }}" == "true" ]]; then
          SCRIPT_PATH="./version.sh"
        else
          SCRIPT_PATH="./versioning-tools/version.sh"
        fi
        
        # Make script executable
        chmod +x "${SCRIPT_PATH}"
        
        # Calculate version
        VERSION=$(${SCRIPT_PATH})
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version is: ${VERSION}"
        
        # Clean version (remove v prefix if present)
        CLEAN_VERSION="${VERSION#v}"
        echo "clean-version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
        
        # Check if pre-release
        if [[ "$VERSION" =~ -dev\. ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
          echo "Pre-release: Yes"
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
          echo "Pre-release: No"
        fi
